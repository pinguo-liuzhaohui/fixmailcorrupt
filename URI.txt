# from RFC3986

2.2.  Reserved Characters

      reserved    = gen-delims / sub-delims

      gen-delims  = ":" / "/" / "?" / "#" / "[" / "]" / "@"

      sub-delims  = "!" / "$" / "&" / "'" / "(" / ")"
                  / "*" / "+" / "," / ";" / "="


3.  Syntax Components

      URI         = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

      hier-part   = "//" authority path-abempty
                  / path-absolute
                  / path-rootless
                  / path-empty

   The following are two example URIs and their component parts:

         foo://example.com:8042/over/there?name=ferret#nose
         \_/   \______________/\_________/ \_________/ \__/
          |           |            |            |        |
       scheme     authority       path        query   fragment
          |   _____________________|__
         / \ /                        \
         urn:example:animal:ferret:nose

3.1.  Scheme

      scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
      
   Although schemes are case-insensitive, the canonical form is lowercase and documents that 
   specify schemes must do so with lowercase letters.  An implementation should accept 
   uppercase letters as equivalent to lowercase in scheme names 
   (e.g., allow "HTTP" as well as "http") for the sake of robustness but should only
   produce lowercase scheme names for consistency.
   
3.2.  Authority

      authority   = [ userinfo "@" ] host [ ":" port ]
      
   The authority component is preceded by a double slash ("//") and is
   terminated by the next slash ("/"), question mark ("?"), or number
   sign ("#") character, or by the end of the URI.

   URI producers and normalizers should omit the ":" delimiter that
   separates host from port if the port component is empty.  Some
   schemes do not allow the userinfo and/or port subcomponents.
   
   If a URI contains an authority component, then the path component
   must either be empty or begin with a slash ("/") character. 

3.2.1.  User Information
      
      userinfo    = *( unreserved / pct-encoded / sub-delims / ":" )
      
   The user information, if present, is followed by a commercial at-sign ("@") that delimits it from the host.
   Use of the format "user:password" in the userinfo field is deprecated.
   
3.2.2.  Host
      
      host        = IP-literal / IPv4address / reg-name
      
    The host subcomponent is case-insensitive.
    Although host is case-insensitive, producers and normalizers should use lowercase
    for registered names and hexadecimal addresses for the sake of
    uniformity, while only using uppercase letters for percent-encodings.
    
      IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
      IPvFuture  = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
      
    This is the only place where square bracket characters are allowed in the URI syntax. 

      IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
      dec-octet   = DIGIT                 ; 0-9
                  / %x31-39 DIGIT         ; 10-99
                  / "1" 2DIGIT            ; 100-199
                  / "2" %x30-34 DIGIT     ; 200-249
                  / "25" %x30-35          ; 250-255

      reg-name    = *( unreserved / pct-encoded / sub-delims )
      
   URI producers should use names that conform to the DNS syntax, 
   even when use of DNS is not immediately apparent, and should 
   limit these names to no more than 255 characters in length.

   The reg-name syntax allows percent-encoded octets in order to
   represent non-ASCII registered names in a uniform way that is
   independent of the underlying name resolution technology.  Non-ASCII
   characters must first be encoded according to UTF-8 [STD63], and then
   each octet of the corresponding UTF-8 sequence must be percent-
   encoded to be represented as URI characters.  URI producing
   applications must not use percent-encoding in host unless it is used
   to represent a UTF-8 character sequence.  When a non-ASCII registered
   name represents an internationalized domain name intended for
   resolution via the DNS, the name must be transformed to the IDNA
   encoding [RFC3490] prior to name lookup.  URI producers should
   provide these registered names in the IDNA encoding, rather than a
   percent-encoding, if they wish to maximize interoperability with
   legacy URI resolvers.

3.2.3.  Port
      
      port        = *DIGIT
      
    A scheme may define a default port. 
    
3.3.  Path

      path          = path-abempty    ; begins with "/" or is empty
                    / path-absolute   ; begins with "/" but not "//"
                    / path-noscheme   ; begins with a non-colon segment
                    / path-rootless   ; begins with a segment
                    / path-empty      ; zero characters

      path-abempty  = *( "/" segment )
      path-absolute = "/" [ segment-nz *( "/" segment ) ]
      path-noscheme = segment-nz-nc *( "/" segment )
      path-rootless = segment-nz *( "/" segment )
      path-empty    = 0<pchar>
      segment       = *pchar
      segment-nz    = 1*pchar
      segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / "@" )
                    ; non-zero-length segment without any colon ":"
      pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"

   If a URI contains an authority component, then the path component
   must either be empty or begin with a slash ("/") character.  If a URI
   does not contain an authority component, then the path cannot begin
   with two slash characters ("//"). 

   Use of the slash character to indicate hierarchy is only required 
   when a URI will be used as the context for relative references.  
   For example, the URI <mailto:fred@example.com> has a path of "fred@example.com",
   whereas the URI <foo://info.example.com?fred> has an empty path.
   
   URI producing applications often use the reserved characters allowed 
   in a segment to delimit scheme-specific or dereference-handler-specific subcomponents.  
   For example, the semicolon (";") and equals ("=") reserved characters are
   often used to delimit parameters and parameter values applicable to
   that segment.  The comma (",") reserved character is often used for
   similar purposes.  For example, one URI producer might use a segment
   such as "name;v=1.1" to indicate a reference to version 1.1 of
   "name", whereas another might use a segment such as "name,1.1" to
   indicate the same.
   
3.4.  Query

      query       = *( pchar / "/" / "?" )
      
   The query component is indicated by the first question
   mark ("?") character and terminated by a number sign ("#") character
   or by the end of the URI.
   
   The characters slash ("/") and question mark ("?") may represent data
   within the query component.  as query components
   are often used to carry identifying information in the form of
   "key=value" pairs and one frequently used value is a reference to
   another URI, it is sometimes better for usability to avoid percent-
   encoding those characters.
   
3.5.  Fragment

      fragment    = *( pchar / "/" / "?" )
      
   A fragment identifier component is indicated by the presence of a
   number sign ("#") character and terminated by the end of the URI.
   The characters slash ("/") and question mark ("?") are allowed to
   represent data within the fragment identifier.
   
   The semantics of a fragment identifier are defined by the set of
   representations that might result from a retrieval action on the
   primary resource.  The fragment's format and resolution is therefore
   dependent on the media type [RFC2046] of a potentially retrieved
   representation, even though such a retrieval is only performed if the
   URI is dereferenced.  If no such representation exists, then the
   semantics of the fragment are considered unknown and are effectively
   unconstrained.  Fragment identifier semantics are independent of the
   URI scheme and thus cannot be redefined by scheme specifications.
   
   the fragment identifier is separated
   from the rest of the URI prior to a dereference, and thus the
   identifying information within the fragment itself is dereferenced
   solely by the user agent, regardless of the URI scheme.
   
